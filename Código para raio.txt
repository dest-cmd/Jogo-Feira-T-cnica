‚úÖ Etapas

Voc√™ ter√° os seguintes scripts/prefabs:

LightningRainController.cs ‚Üí Faz chover raios.

LightningStrike.cs ‚Üí Script do raio (causa dano + lentid√£o).

EnemyHealth.cs ‚Üí J√° temos.

Novo script: EnemyMovement.cs (ou qualquer script que controle velocidade) ‚Üí Para aplicar lentid√£o.



üìú 1. LightningRainController.cs ‚Äì (controlador de chuva de raios)
using UnityEngine;

public class LightningRainController : MonoBehaviour
{
    public GameObject lightningPrefab;
    public float spawnInterval = 3f;
    public Vector2 areaMin; // canto inferior esquerdo da √°rea
    public Vector2 areaMax; // canto superior direito da √°rea

    private void Start()
    {
        InvokeRepeating(nameof(SpawnLightning), 0f, spawnInterval);
    }

    void SpawnLightning()
    {
        // Posi√ß√£o aleat√≥ria na √°rea definida
        Vector2 spawnPos = new Vector2(
            Random.Range(areaMin.x, areaMax.x),
            Random.Range(areaMin.y, areaMax.y)
        );

        Instantiate(lightningPrefab, spawnPos, Quaternion.identity);
    }
}

üõ†Ô∏è No Unity:

Coloque esse script num GameObject chamado LightningRainManager.

Defina areaMin e areaMax para cobrir a √°rea da sua cena onde os raios podem cair.

Arraste o prefab de raio no campo lightningPrefab.



‚ö° 2. LightningStrike.cs ‚Äì (comportamento do raio)
using UnityEngine;

public class LightningStrike : MonoBehaviour
{
    public int damage = 30;
    public float slowDuration = 2f;
    public float slowAmount = 0.5f; // reduz para 50% da velocidade
    public float lifetime = 1f;

    private void Start()
    {
        Destroy(gameObject, lifetime);
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Enemy"))
        {
            EnemyHealth health = other.GetComponent<EnemyHealth>();
            if (health != null)
            {
                health.TakeDamage(damage);
            }

            EnemyMovement movement = other.GetComponent<EnemyMovement>();
            if (movement != null)
            {
                movement.ApplySlow(slowAmount, slowDuration);
            }
        }
    }
}





üêå 3. EnemyMovement.cs ‚Äì (comportamento de movimenta√ß√£o com lentid√£o)

Se j√° tiver um sistema de movimento, adapte esse exemplo:

using UnityEngine;

public class EnemyMovement : MonoBehaviour
{
    public float moveSpeed = 3f;

    private float currentSpeed;
    private bool isSlowed = false;

    private void Start()
    {
        currentSpeed = moveSpeed;
    }

    void Update()
    {
        // Movimento de exemplo (andar para frente)
        transform.Translate(Vector2.left * currentSpeed * Time.deltaTime);
    }

    public void ApplySlow(float slowFactor, float duration)
    {
        if (!isSlowed)
        {
            StartCoroutine(SlowCoroutine(slowFactor, duration));
        }
    }

    private System.Collections.IEnumerator SlowCoroutine(float slowFactor, float duration)
    {
        isSlowed = true;
        currentSpeed = moveSpeed * slowFactor;

        yield return new WaitForSeconds(duration);

        currentSpeed = moveSpeed;
        isSlowed = false;
    }
}




üß™ 4. Prefab do Raio

LightningPrefab:

Um sprite (ex: flash branco ou sprite animado de raio).

Um CircleCollider2D ou BoxCollider2D (isTrigger = true).

Rigidbody2D (Kinematic).

Script: LightningStrike.cs.

üß™ 5. Tag "Enemy" e setup dos inimigos

Inimigos devem ter tag "Enemy".

Ter o script EnemyHealth.

Ter EnemyMovement (ou similar que aceite o efeito de lentid√£o).

Ter Collider2D e Rigidbody2D.